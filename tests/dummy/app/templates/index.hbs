{{formatMarkdown "
## Installation

`ember install ember-keyboard`

## Usage

First, add `EKMixin` to your component:

```js
import Ember from 'ember';
import { EKMixin } from 'ember-keyboard';

export default Ember.Component.extend(EKMixin, {
  . . . .
});
```

Now your component observes several new properties that'll help it determine when and if it should respond to key events. These properties are outlined in greater detail below, but to simply get things started, you'll need to set `keyboardActivated` to true:

```js
  activateKeyboard: Ember.on('init', function() {
    this.set('keyboardActivated', true);
  })
```

Or simply activate the component from your template:

```hbs
{{my-component keyboardActivated=true}}
```

Once it's activated, your component will start listening for key events. Let's say you want your component to respond to the key `s` as well as `ctrl+shift+a`. You could do so with:

```js
import { keyUp } from 'ember-keyboard';

. . . .

aFunction: Ember.on(keyUp('s'), function() {
  console.log('`s` was pressed');
}),

anotherFunction: Ember.on(keyUp('ctrl+shift+a'), function() {
  console.log('`ctrl+shift+a` was pressed');
})
```

Your component will be able to listen to any combination of modifier keys (`ctrl`, `shift`, `alt`, and `meta`) and one principle key, such as `a` in the example above. For a full list of the primary keys (such as `a`, `1`, ` `, `Escape`, and `ArrowLeft`), look [here](https://github.com/null-null-null/ember-keyboard/blob/master/addon/fixtures/key-map.js).

Finally, if you ever want a component to stop listening to key events, you can deactivate it:

```js
deactivateKeyboard: Ember.on('arbitraryTrigger', function() {
  this.set('keyboardActivated', false);
})
```

Note that components will automatically be deactivated on `willDestroyElement`.

## Interactive Property Demos

Below are several interactive demos of `ember-keyboard` properties. They allow you to see how different properties interact with each other. Simply click the containing box and try using the below key commands.

Controls:

* `LeftArrow`: decrement counter by 1
* `RightArrow`: increment counter by 1
* `ctrl`+ArrowKey: increment/decrement x10
* `ctrl+shift`+ArrowKey: increment/decrement x100
* `r`: resets counter to 0
"}}

{{keyboard-activated-widget}}

{{keyboard-priority-widget}}

{{keyboard-first-responder-widget}}

{{keyboard-lax-priority-widget}}

{{formatMarkdown "
## Mixins

To reduce boilerplate, `ember-keyboard` includes several mixins with common patterns. **Note: you still need to use the base EKMixin for these to work**

### EKOnInsertMixin

`import { EKOnInsertMixin } from 'ember-keyboard';`

This mixin will activate the component on `didInsertElement`, and as per normal, it will deactivate on `willDestroyElement`.

### EKOnFocusMixin

`import { EKOnFocusMixin } from 'ember-keyboard';`

This mixin will activate the component whenever it receives focus and deactivate it when it loses focus.

### EKFirstResponderOnFocusMixin

`import { EKFirstResponderOnFocusMixin } from 'ember-keyboard';`

This mixin grants the component first responder status while it is focused. When it loses focus, it resigns its status.

Note that it will also activate the component on focus in, though it does not deactivate the component on focus out.

## Advanced Usage

### `Ember.TextField` && `Ember.TextArea`

To prevent `ember-keyboard` from responding to key strokes while an input/textarea is focused, we've reopened `Ember.TextField` and `Ember.TextArea` and applied the `EKOnInsertMixin` and `EKFirstResponderOnFocusMixin`. This ensures that whenever an input is focused, other key responders will not fire. If you want to have responders associated with an input or textarea (such as a rich text editor with `keyUp('ctrl+i')` bindings), you need to extend these components from `Ember.TextField` or `Ember.TextArea` rather than `Ember.component`.

This applies to `input` and `textarea` helpers:

```hbs
{{input}}
{{textarea}}
```

### `keyUp` and `keyDown`

`ember-keyboard` listens to both `keydown` and `keyup` events, and has corresponding functions:

```js
import { keyUp, keyDown } from 'ember-keyboard';
```

Note that `keydown` events fire repeatedly while the key is pressed, while `keyup` events fire only once, after the key has been released.

### `event`

When `ember-keyboard` triggers an event, it passes in the `event` object as its first argument:

```js
saveDocument: Ember.on(keyDown('ctrl+s'), function(event) {
  this.performSave();
  event.preventDefault();
})
```

Note that if you want `preventDefault` to prevent `window` level events, you'll need to use `keyDown`, as the default event will fire before `keyUp`.

### `getKey`

Did you know that 65 was the keycode for 'a'? Or that 37 was the keycode for the right arrow? If you don't want to litter your code with keycode references, you can use `getKey`, which `ember-keyboard` uses internally:

```js
import { getKey } from 'ember-keyboard';

. . . .

keyMapper: Ember.on(keyDown('a'), keyDown('b'), keyDown('c'), function(event) {
  const key = getKey(event);
  switch (key) {
    match 'a': console.log('It\'s an a!'); break;
    . . . .
  }
})
```

Just pass in an `event`, and it'll return a human readable key. Look [here](https://github.com/null-null-null/ember-keyboard/blob/master/addon/fixtures/key-map.js) for a full mapping.

### Key Indifference

If you want an event to fire for every keypress, then simply don't provide a keystring to `keyUp` or `keyDown`. This can be a handy way to trigger events for large ranges of keys, such as on any alphanumeric keypress. For instance:

```js
triggerOnAlphaNumeric: Ember.on(keyUp(), function(event) {
  if (/^\w(?!.)/.test(getKey(event))) {
    this.startEditing();
  }
})
```

### `meta` and `alt`

Macs diverge from other PCs in their naming of `meta` and `alt`. The `alt` key is named `options`, while the `meta` key is named `command`. You don't need to do anything special to get `ember-keyboard` to recognize `options` or `command` keys, just use their generic names `alt` and `meta`. This will ensure that your keys fire across platforms.

### Dynamically binding events

If you'd like to dynamically add and remove key listeners on a component, you can do so with the standard `on` and `off` functions:

```js
component.on(keyUp('ctrl+s'), someFunction);
component.off(keyUp('ctrl+s'), someFunction);
```
"}}
